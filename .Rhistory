base_plot <- ggplot(my_teams, aes(x = RD, y = residuals_pyt)) +
geom_point(alpha = 0.3) +
geom_hline(yintercept = 0, linetype = 3) +
xlab("Run differential") + ylab("Residual")
highlight_teams <- my_teams |>
arrange(desc(abs(residuals_pyt))) |>
slice_head(n = 8)
library(ggrepel)
base_plot +
geom_point(data = highlight_teams, color = "blue") +
geom_text_repel(
data = highlight_teams, color = "blue",
aes(label = paste(teamID, yearID))
)
View(my_teams)
# Plot vs predicted win percentage:
base_plot2 <- ggplot(my_teams, aes(x = Wpct_pyt, y = residuals_pyt)) +
geom_point(alpha = 0.3) +
geom_hline(yintercept = 0, linetype = 3) +
xlab("Run differential") + ylab("Residual")
base_plot2 +
geom_point(data = highlight_teams, color = "blue") +
geom_text_repel(
data = highlight_teams, color = "blue",
aes(label = paste(teamID, yearID))
)
base_plot2 <- ggplot(my_teams, aes(x = Wpct_pyt, y = residuals_pyt)) +
geom_point(alpha = 0.3) +
geom_hline(yintercept = 0, linetype = 3) +
xlab("Predicted Wpct") + ylab("Residual")
base_plot2 +
geom_point(data = highlight_teams, color = "blue") +
geom_text_repel(
data = highlight_teams, color = "blue",
aes(label = paste(teamID, yearID))
)
base_plot2 <- ggplot(my_teams, aes(x = Wpct, y = residuals_pyt)) +
geom_point(alpha = 0.3) +
geom_hline(yintercept = 0, linetype = 3) +
xlab("Predicted Wpct") + ylab("Residual")
base_plot2 +
geom_point(data = highlight_teams, color = "blue") +
geom_text_repel(
data = highlight_teams, color = "blue",
aes(label = paste(teamID, yearID))
)
# Plot vs predicted win percentage:
base_plot2 <- ggplot(my_teams, aes(x = Wpct_pyt, y = residuals_pyt)) +
geom_point(alpha = 0.3) +
geom_hline(yintercept = 0, linetype = 3) +
xlab("Predicted Wpct") + ylab("Residual")
base_plot2 +
geom_point(data = highlight_teams, color = "blue") +
geom_text_repel(
data = highlight_teams, color = "blue",
aes(label = paste(teamID, yearID))
)
base_plot2 <- ggplot(my_teams, aes(x = Wpct, y = residuals_pyt)) +
geom_point(alpha = 0.3) +
geom_hline(yintercept = 0, linetype = 3) +
xlab("Wpct") + ylab("Residual")
base_plot2 +
geom_point(data = highlight_teams, color = "blue") +
geom_text_repel(
data = highlight_teams, color = "blue",
aes(label = paste(teamID, yearID))
)
#########
# Chapter 4 - exercise 2
library(tidyverse)
library(abdwr3edata)
library(Lahman)
# 19th century teams
my_teams <- Teams |>
filter(yearID >= 1800, yearID < 1900) |>
select(teamID, yearID, lgID, G, W, L, R, RA) |>
mutate(RD = R - RA, Wpct = W / (W + L))
my_teams |>
slice_tail(n = 6)
ggplot(my_teams, aes(x = RD, y = Wpct)) +
geom_point() +
scale_x_continuous("Run differential") +
scale_y_continuous("Winning percentage")
# Add logs
my_teams <- my_teams |>
mutate(
logWratio = log(W / L),
logRratio = log(R / RA)
)
# Some teams won no games at all ??
my_teams <- my_teams |> filter(W != 0)
# fit
pytFit <- lm(logWratio ~ 0 + logRratio, data = my_teams)
pytFit
# compute residuals
exp = coef(pytFit)
my_teams <- my_teams |>
mutate(Wpct_pyt = R ^ exp / (R ^ exp + RA ^ exp)) |>
mutate(residuals_pyt = Wpct - Wpct_pyt)
base_plot <- ggplot(my_teams, aes(x = RD, y = residuals_pyt)) +
geom_point(alpha = 0.3) +
geom_hline(yintercept = 0, linetype = 3) +
xlab("Run differential") + ylab("Residual")
highlight_teams <- my_teams |>
arrange(desc(abs(residuals_pyt))) |>
slice_head(n = 8)
library(ggrepel)
base_plot +
geom_point(data = highlight_teams, color = "blue") +
geom_text_repel(
data = highlight_teams, color = "blue",
aes(label = paste(teamID, yearID))
)
# "By inspecting the residual plot of your fitted model
#from (a), did the great and poor teams in the 19th century
#do better or worse than one would expect on the basis of
#their run differentials?
# I dont see anyone doing much better or worse on the extremes...
# I guess the best did slighlty better then predicted by pythag
# and the worse did slightly worse then predicted by pythag, where
# by best and worse I mean in terms of run differential.
# Plot vs predicted win percentage
# Note that if you plot vs actual win percentage you will
# see patterns, but these are not real. Residuals are not
# in general independant of the response!  See ROS 11.2
base_plot2 <- ggplot(my_teams, aes(x = Wpct_pyt, y = residuals_pyt)) +
geom_point(alpha = 0.3) +
geom_hline(yintercept = 0, linetype = 3) +
xlab("Wpct") + ylab("Residual")
base_plot2 +
geom_point(data = highlight_teams, color = "blue") +
geom_text_repel(
data = highlight_teams, color = "blue",
aes(label = paste(teamID, yearID))
)
library(tidyverse)
library(abdwr3edata)
retro2016 <- read_rds(here::here("data/retro2016.rds"))
library(tidyverse)
library(abdwr3edata)
library(baseballr)
retro_data <- baseballr::retrosheet_data(
here::here("data_large/retrosheet"),
c(1992, 1996, 1998, 2016)
)
retro_data <- baseballr::retrosheet_data(
here::here("data_large/retrosheet"),
c(1992, 1996, 1998, 2016)
)
View(retro_data)
retro2016 <- retro_data |>
pluck("2016") |>
pluck("events")
retro2016 |>
write_rds(
file = here::here("data/retro2016.rds"),
compress = "xz"
)
? retrosheet_data
# uses chadwick cli
retro_data <- baseballr::retrosheet_data(
here::here("data_large/retrosheet"),
c(1992, 1996, 1998, 2016)
)
? baseballr
retro2016 <- read_rds(here::here("data/retro2016.rds"))
View(retro2016)
retro2016_roster <- retro_data |> pluck("2016") |> pluck("roster")
retro_data
retro2016_roster <- retro_data |> pluck("2016") |> pluck("rosters")
retro2016_roster |> write_rds(
file = here::here("data/retro2016_roster.rds"), compress = "xz")
# uses chadwick cli
retro_data <- baseballr::retrosheet_data(
here::here("data_large/retrosheet"),
c(2016)
)
pbp2016 <- retro2016 |>
mutate(pseq = str_remove_all(pitch_seq_tx, "[.>123N+*]"))
View(pbp2016)
# identify some balls and strike situations
pbp2016 <- pbp2016 |>
retrosheet_add_states()
pbp2016 <- retro2016 |>
mutate(pseq = str_remove_all(pitch_seq_tx, "[.>123N+*]"))
# add run states as in chapter 5
pbp2016 <- pbp2016 |>
retrosheet_add_states()
View(pbp2016)
# Create erm2016
retro2016 <- read_rds(here::here("data/retro2016.rds"))
retro2016 <- retro2016 |>
mutate(
runs_before = away_score_ct + home_score_ct,
half_inning = paste(game_id, inn_ct, bat_home_id),
runs_scored =
(bat_dest_id > 3) + (run1_dest_id > 3) +
(run2_dest_id > 3) + (run3_dest_id > 3)
)
half_innings <- retro2016 |>
group_by(half_inning) |>
summarize(
outs_inning = sum(event_outs_ct),
runs_inning = sum(runs_scored),
runs_start = first(runs_before),
max_runs = runs_inning + runs_start
)
retro2016 <- retro2016 |>
inner_join(half_innings, by = "half_inning") |>
mutate(runs_roi = max_runs - runs_before)
retro2016 <- retro2016 |>
mutate(
bases = paste0(
if_else(base1_run_id == "", 0, 1),
if_else(base2_run_id == "", 0, 1),
if_else(base3_run_id == "", 0, 1)
),
state = paste(bases, outs_ct)
)
retro2016 <- retro2016 |>
mutate(
is_runner1 = as.numeric(
run1_dest_id == 1 | bat_dest_id == 1
),
is_runner2 = as.numeric(
run1_dest_id == 2 | run2_dest_id == 2 |
bat_dest_id == 2
),
is_runner3 = as.numeric(
run1_dest_id == 3 | run2_dest_id == 3 |
run3_dest_id == 3 | bat_dest_id == 3
),
new_outs = outs_ct + event_outs_ct,
new_bases = paste0(is_runner1, is_runner2, is_runner3),
new_state = paste(new_bases, new_outs)
)
changes2016 <- retro2016 |>
filter(state != new_state | runs_scored > 0)
changes2016_complete <- changes2016 |>
filter(outs_inning == 3)
erm_2016 <- changes2016_complete |>
group_by(bases, outs_ct) |>
summarize(mean_run_value = mean(runs_roi))
erm_2016
erm_2016 |>
pivot_wider(
names_from = outs_ct,
values_from = mean_run_value,
names_prefix = "Outs="
)
erm_2016 |> write_rds(
file = here::here("data/erm2016.rds"), compress = "xz")
erm_2016 <- read_rds(here::here("data/erm2016.rds"))
pbp2016 <- pbp2016 |>
left_join(
erm_2016, join_by(bases, outs_ct)
) |>
rename(rv_start = mean_run_value) |>
left_join(
erm_2016, join_by(new_bases == bases, new_outs == outs_ct)
) |>
rename(rv_end = mean_run_value) |>
replace_na(list(rv_end = 0)) |>
mutate(run_value = rv_end - rv_start + runs_scored)
View(pbp2016)
View(erm_2016)
# add counts
pbp2016 <- pbp2016 |>
retrosheet_add_counts()
pbp2016 |>
select(
game_id, event_id, run_value, c00, c10, c20,
c11, c01, c30, c21, c31, c02, c12, c22, c32
) |>
slice_head(n = 5)
# start out ahead or behind ?
pbp2016 |>
filter(c10 == 1 | c01 == 1) |>
group_by(c10, c01) |>
summarize(
num_ab = n(),
mean_run_value = mean(run_value)
)
pbp_counts <- pbp2016 |>
select(starts_with("c"), run_value)
pbp_counts |> head()
# Convert to long form
pbp_counts_tidy <- pbp_counts |>
pivot_longer(
cols = -run_value,
names_to = "count",
values_to = "passed_thru"
)
pbp_counts_tidy |>
sample_n(6)
run_value_by_count <- pbp_counts_tidy |>
filter(passed_thru) |>
group_by(count) |>
summarize(
num_ab = n(),
value = mean(run_value)
)
View(run_value_by_count)
run_value_by_count <- run_value_by_count |>
mutate(
balls = str_sub(count, 2, 2),
strikes = str_sub(count, 3, 3)
)
count_plot <- run_value_by_count |>
ggplot(aes(x = strikes, y = balls, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 3))) +
scale_fill_gradient2(
"xRV", low = "grey10", high = crcblue,
mid = "white", midpoint = 100
)
count_plot <- run_value_by_count |>
ggplot(aes(x = strikes, y = balls, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 3))) +
scale_fill_gradient2(
"xRV", low = "grey10", high = "blue",
mid = "white",
)
count_plot
count22 <- pbp2016 |>
filter(c22 == 1)
count22 |>
summarize(
num_ab = n(),
mean_run_value = mean(run_value)
)
load(here::here("data/balls_strikes_count.RData"))
?load
?abdwr3edata
?? abdwr3edata
data("umpires")
data("cabrera")
data("verlander")
cabrera
? data
data
data(abdwr3edata)
data()
data(package = "abdwr3edata")
library(tidyverse)
library(abdwr3edata)
library(baseballr)
data(retro2016)
pbp2016 <- retro2016 |>
mutate(pseq = str_remove_all(pitch_seq_tx, "[.>123N+*]"))
library(tidyverse)
structure(list(Month = c(1, 2, 3), Year = c(2021, 2021, 2021),
HeadWeek = c(1930.74, 1419.6, 607.23), Week1 = c(1763.07,
1574.16, 382.41), Week2 = c(2062.22, 673.12, 612.07), Week3 = c(1761.95,
907, 215.35), Week4 = c(1895.9, 607.23, 185.2), Week5 = c(1419.6,
0, 0), TrailWeek = c(1574.16, 382.41, 370.97), BeginningSeason = c(2020,
2020, 2020), EndSeason = c(2021, 2021, 2021), Season = structure(c(3L,
3L, 3L), levels = c("2018-2019", "2019-2020", "2020-2021",
"2021-2022", "2022-2023", "2023-2024", "2024-2025"), class = c("ordered",
"factor")), CYExports = c(8829.2999, 4564.127059, 2302.743184
), Date = structure(c(18658, 18686, 18717), class = "Date"),
CYExportsShift = c(4564.127059, 2302.743184, 1393.217828),
RateChange = c(-0.434474698127835, -0.155389383748707, -0.102228692094298
), FirstWeek = c(1763.07, 1574.16, 382.41), LastWeek = c(1419.6,
607.23, 185.2), MiddleWeeks = c(5720.07, 1580.12, 827.42)), row.names = c(NA,
-3L), class = c("tbl_df", "tbl", "data.frame"))
dependent <- "CYExportsShift"
weeks_form <- c("HeadWeek", "FirstWeek", "MiddleWeeks", "LastWeek")
inter_form <- "RateChange"
varb_terms <- weeks_form |>  glue_collapse(sep = " + ")
inter_terms <- glue("{weeks_form}:{inter_form}") |> glue_collapse(sep = " + ")
simple_formula <- glue("{dependent} ~ {varb_terms}") |>  as.formula()
formula_model <- glue("{dependent} ~ {varb_terms} + {inter_terms}") |>  as.formula()
structure(list(Month = c(1, 2, 3), Year = c(2021, 2021, 2021),
HeadWeek = c(1930.74, 1419.6, 607.23), Week1 = c(1763.07,
1574.16, 382.41), Week2 = c(2062.22, 673.12, 612.07), Week3 = c(1761.95,
907, 215.35), Week4 = c(1895.9, 607.23, 185.2), Week5 = c(1419.6,
0, 0), TrailWeek = c(1574.16, 382.41, 370.97), BeginningSeason = c(2020,
2020, 2020), EndSeason = c(2021, 2021, 2021), Season = structure(c(3L,
3L, 3L), levels = c("2018-2019", "2019-2020", "2020-2021",
"2021-2022", "2022-2023", "2023-2024", "2024-2025"), class = c("ordered",
"factor")), CYExports = c(8829.2999, 4564.127059, 2302.743184
), Date = structure(c(18658, 18686, 18717), class = "Date"),
CYExportsShift = c(4564.127059, 2302.743184, 1393.217828),
RateChange = c(-0.434474698127835, -0.155389383748707, -0.102228692094298
), FirstWeek = c(1763.07, 1574.16, 382.41), LastWeek = c(1419.6,
607.23, 185.2), MiddleWeeks = c(5720.07, 1580.12, 827.42)), row.names = c(NA,
library(glue)                                                                                                                                                -3L), class = c("tbl_df", "tbl", "data.frame"))
dependent <- "CYExportsShift"
weeks_form <- c("HeadWeek", "FirstWeek", "MiddleWeeks", "LastWeek")
inter_form <- "RateChange"
varb_terms <- weeks_form |>  glue_collapse(sep = " + ")
inter_terms <- glue("{weeks_form}:{inter_form}") |> glue_collapse(sep = " + ")
simple_formula <- glue("{dependent} ~ {varb_terms}") |>  as.formula()
formula_model <- glue("{dependent} ~ {varb_terms} + {inter_terms}") |>  as.formula()
forula_model
formula_model
library(tidymodel)
!!simple_forumla
!!simple_formula
install.packages("tidymodel")
install.packages("tidymodels")
library(tidymodel)
library(tidymodels)
recipe_export <-
recipe(
data = model_training,
formula = !!simple_formula
) |>
step_naomit() |>
step_interact(terms = ~ RateChange:contains("Week"))
model_training = structure(list(Month = c(1, 2, 3), Year = c(2021, 2021, 2021),
HeadWeek = c(1930.74, 1419.6, 607.23), Week1 = c(1763.07,
1574.16, 382.41), Week2 = c(2062.22, 673.12, 612.07), Week3 = c(1761.95,
907, 215.35), Week4 = c(1895.9, 607.23, 185.2), Week5 = c(1419.6,
0, 0), TrailWeek = c(1574.16, 382.41, 370.97), BeginningSeason = c(2020,
2020, 2020), EndSeason = c(2021, 2021, 2021), Season = structure(c(3L,
3L, 3L), levels = c("2018-2019", "2019-2020", "2020-2021",
"2021-2022", "2022-2023", "2023-2024", "2024-2025"), class = c("ordered",
"factor")), CYExports = c(8829.2999, 4564.127059, 2302.743184
), Date = structure(c(18658, 18686, 18717), class = "Date"),
CYExportsShift = c(4564.127059, 2302.743184, 1393.217828),
RateChange = c(-0.434474698127835, -0.155389383748707, -0.102228692094298
), FirstWeek = c(1763.07, 1574.16, 382.41), LastWeek = c(1419.6,
607.23, 185.2), MiddleWeeks = c(5720.07, 1580.12, 827.42)), row.names = c(NA,
library(glue)                                                                                                                                                -3L), class = c("tbl_df", "tbl", "data.frame"))
recipe_export <-
recipe(
data = model_training,
formula = !!simple_formula
) |>
step_naomit() |>
step_interact(terms = ~ RateChange:contains("Week"))
model_data <- structure(list(Month = c(1, 2, 3), Year = c(2021, 2021, 2021),
HeadWeek = c(1930.74, 1419.6, 607.23), Week1 = c(1763.07,
1574.16, 382.41), Week2 = c(2062.22, 673.12, 612.07), Week3 = c(1761.95,
907, 215.35), Week4 = c(1895.9, 607.23, 185.2), Week5 = c(1419.6,
0, 0), TrailWeek = c(1574.16, 382.41, 370.97), BeginningSeason = c(2020,
2020, 2020), EndSeason = c(2021, 2021, 2021), Season = structure(c(3L,
3L, 3L), levels = c("2018-2019", "2019-2020", "2020-2021",
"2021-2022", "2022-2023", "2023-2024", "2024-2025"), class = c("ordered",
"factor")), CYExports = c(8829.2999, 4564.127059, 2302.743184
), Date = structure(c(18658, 18686, 18717), class = "Date"),
CYExportsShift = c(4564.127059, 2302.743184, 1393.217828),
RateChange = c(-0.434474698127835, -0.155389383748707, -0.102228692094298
), FirstWeek = c(1763.07, 1574.16, 382.41), LastWeek = c(1419.6,
607.23, 185.2), MiddleWeeks = c(5720.07, 1580.12, 827.42)), row.names = c(NA,
-3L), class = c("tbl_df", "tbl", "data.frame"))
recipe_export <-
recipe(
data = model_training,
formula = !!simple_formula
) |>
step_naomit() |>
step_interact(terms = ~ RateChange:contains("Week"))
recipe_export <-
recipe(
data = model_data,
formula = !!simple_formula
) |>
step_naomit() |>
step_interact(terms = ~ RateChange:contains("Week"))
recipe_export <-
recipe(
data = model_data,
formula = simple_formula
) |>
step_naomit() |>
step_interact(terms = ~ RateChange:contains("Week"))
simple_formula
? !!
recipe_export
? "!!"
recipe_export <-
recipe(
data = model_data,
formula = formula_model
) |>
step_naomit() |>
step_interact(terms = ~ RateChange:contains("Week"))
recipe_export <-
recipe(
data = model_data,
formula = !!formula_model
) |>
step_naomit() |>
step_interact(terms = ~ RateChange:contains("Week"))
formula_model
typeof(formula_model)
simple_formula
recipe_export <-
recipe(
data = model_data,
formula = formula_model
) |>
step_naomit() |>
step_interact(terms = ~ RateChange:contains("Week"))
recipe_export <-
recipe(
data = model_data,
formula = !!simple_formula
) |>
step_naomit() |>
step_interact(terms = ~ RateChange:contains("Week"))
recipe_export <-
recipe(
data = model_data,
formula = simple_formula
) |>
step_naomit() |>
step_interact(terms = ~ RateChange:contains("Week"))
